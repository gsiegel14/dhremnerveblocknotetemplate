---
description: 
globs: 
alwaysApply: false
---
# Cursor Development Rules & AI Collaboration Guide
 
## üìú Core Philosophy
 
1.  **Direct Action & Careful Execution:** Once the relevant code is identified and the task is well-defined, **prioritize applying changes directly** using available tools (e.g., `replace_in_file`, `write_to_file`). Proceed deliberately and carefully, clearly stating the action being taken (e.g., "Applying fix:", "Creating file:").
    *   **Precision with `replace_in_file`:** When using `replace_in_file`, ensure utmost precision:
        *   **Exact Match:** The `SEARCH` block must match the target code *exactly* (including whitespace, indentation, line endings, comments).
        *   **Minimal Context:** Include only enough lines in `SEARCH` to uniquely identify the target section. Avoid large blocks of unchanged code.
        *   **Complete Lines:** Always use complete lines in `SEARCH`.
        *   **Multiple Edits:** Use multiple, ordered `SEARCH/REPLACE` blocks for changes in different file locations.
        *   **Post-Formatting:** Base subsequent `SEARCH` blocks on the file content *after* any auto-formatting applied by the system from previous edits.
    *   **Fallback (Copy/Paste):** If direct tool use (`replace_in_file`) repeatedly fails or is impractical for complex edits, provide clear, step-by-step instructions for the user to copy and paste the changes manually or execute specific, safe terminal commands.
2.  **Explain Simply:** At each step of identifying or fixing a problem, explain the issue and the proposed solution in simple terms suitable for a coding novice. Clearly state *why* there is a problem and *how* the fix addresses it.
3.  **Simplicity:** Prioritize simple, clear, and maintainable solutions. Avoid unnecessary complexity or over-engineering.
4.  **Iterate:** Prefer iterating on existing, working code rather than building entirely new solutions from scratch, unless fundamentally necessary or explicitly requested.
5.  **Focus:** Concentrate efforts on the specific task assigned. Avoid unrelated changes or scope creep.
6.  **Quality:** Strive for a clean, organized, well-tested, and secure codebase.
7.  **Collaboration:** This document guides both human developers and the AI assistant for effective teamwork.
 
## üìö Project Context & Understanding
 
1.  **Documentation First:**
    *   **Always** check for and thoroughly review relevant project documentation *before* starting any task. This includes:
        *   Product Requirements Documents (PRDs)
        *   `README.md` (Project overview, setup, patterns, technology stack)
        *   `docs/architecture.md` (System architecture, component relationships)
        *   `docs/technical.md` (Technical specifications, established patterns)
        *   `tasks/tasks.md` (Current development tasks, requirements)
    *   If documentation is missing, unclear, or conflicts with the request, **ask for clarification**.
2.  **Architecture Adherence:**
    *   Understand and respect module boundaries, data flow, system interfaces, and component dependencies outlined in `docs/architecture.md`.
    *   Validate that changes comply with the established architecture. Warn and propose compliant solutions if a violation is detected.
3.  **Pattern & Tech Stack Awareness:**
    *   Reference `README.md` and `docs/technical.md` to understand and utilize existing patterns and technologies.
    *   Exhaust options using existing implementations before proposing new patterns or libraries.
4.  **Cloud Build Awareness:** Understand the project's Google Cloud Build configuration and ensure changes are compatible with the CI/CD pipeline.
 
## ‚öôÔ∏è Task Execution & Workflow
 
1.  **Task Definition:**
    *   Clearly understand the task requirements, acceptance criteria, and any dependencies from `tasks/tasks.md` and the PRD.
2.  **Systematic Change Protocol:** Before making significant changes:
    *   **Identify Impact:** Determine affected components, dependencies, and potential side effects.
    *   **Plan & Execute Sequentially:** Outline the steps required. Tackle **one step at a time**, ensuring each is complete and verified before proceeding to the next. Focus on one logical change or file per step where possible.
    *   **Verify Testing:** Confirm how the change will be tested. Add tests if necessary *before* implementing (see TDD).
3.  **Progress Tracking:**
    *   Keep `docs/status.md` updated with task progress (in-progress, completed, blocked), issues encountered, and completed items.
    *   Update `tasks/tasks.md` upon task completion or if requirements change during implementation.
4.  **Output Format:** Structure responses, especially those involving steps or commands, in a way that is easily executable. For example, provide clear, sequential steps, and format commands so they can be directly pasted into a terminal.
5.  **Include Project Details:** Whenever possible and relevant, include specific project details (like Project ID, relevant file paths, configuration settings) in outputs to provide clear context.
 
## ü§ñ AI Collaboration & Prompting
 
1.  **Clarity is Key:** Provide clear, specific, and unambiguous instructions to the AI. Define the desired outcome, constraints, and context.
2.  **Context Referencing:** If a task spans multiple interactions, explicitly remind the AI of relevant previous context, decisions, or code snippets.
3.  **Question AI Output:** Human developers should critically review AI-generated code. Question assumptions, verify logic, and don't blindly trust confident-sounding but potentially incorrect suggestions (hallucinations).
4.  **Focus the AI:** Guide the AI to work on specific, focused parts of the task. Avoid overly broad requests that might lead to architectural or logical errors.
5.  **Leverage Strengths:** Use the AI for tasks it excels at (boilerplate generation, refactoring specific patterns, finding syntax errors, generating test cases) but maintain human oversight for complex logic, architecture, and security.
6.  **Incremental Interaction:** Break down complex tasks into smaller steps for the AI. Review and confirm each step before proceeding.
7.  **Standard Check-in (for AI on large tasks):** Before providing significant code suggestions:
    *   "Confirming understanding: I've reviewed [specific document/previous context]. The goal is [task goal], adhering to [key pattern/constraint]. Proceeding with [planned step]." (This replaces the more robotic "STOP AND VERIFY").
8.  **Detailed Planning & Execution:** When outlining a plan or executing a multi-step task:
    *   Break down the process into clear, sequential steps.
    *   For each step involving terminal commands, provide the *exact*, ready-to-paste command(s).
    *   Explain the purpose of each step and command briefly.
9.  **Output Format:** Structure responses, especially those involving steps or commands, in a way that is easily executable. For example, provide clear, sequential steps, and format commands so they can be directly pasted into a terminal.
10. **Include Project Details:** Whenever possible and relevant, include specific project details (like Project ID, relevant file paths, configuration settings) in outputs to provide clear context.
11. **Leverage AI Expertise:** Utilize the AI's specialized knowledge in areas like Google Gemini and Google Vertex AI for relevant tasks.

## ‚ú® Code Quality & Style
 
1.  **TypeScript Guidelines:** Use strict typing (avoid `any`). Document complex logic or public APIs with JSDoc.
2.  **Readability & Maintainability:** Write clean, well-organized code.
3.  **Small Files & Components:**
    *   Keep files under **300 lines**. Refactor proactively.
    *   Break down large React components into smaller, single-responsibility components.
4.  **Avoid Duplication (DRY):** Actively look for and reuse existing functionality. Refactor to eliminate duplication.
5.  **No Bazel:** Bazel is not permitted. Use project-specified build tools.
6.  **Linting/Formatting:** Ensure all code conforms to project's ESLint/Prettier rules.
7.  **Pattern Consistency:** Adhere to established project patterns. Don't introduce new ones without discussion/explicit instruction. If replacing an old pattern, ensure the old implementation is fully removed.
8.  **File Naming:** Use clear, descriptive names. Avoid "temp", "refactored", "improved", etc., in permanent file names.
9.  **No One-Time Scripts:** Do not commit one-time utility scripts into the main codebase.
10. **CSS Strategy:**
    *   Prefer modular CSS (separate files imported into a main stylesheet) over inline styles.
    *   Before adding new styles, check existing stylesheets and inline styles to avoid conflicts or duplication.

## ‚ôªÔ∏è Refactoring
 
1.  **Purposeful Refactoring:** Refactor to improve clarity, reduce duplication, simplify complexity, or adhere to architectural goals.
2.  **Holistic Check:** When refactoring, look for duplicate code, similar components/files, and opportunities for consolidation across the affected area.
3.  **Edit, Don't Copy:** Modify existing files directly. Do not duplicate files and rename them (e.g., `component-v2.tsx`).
4.  **Verify Integrations:** After refactoring, ensure all callers, dependencies, and integration points function correctly. Run relevant tests.
 
## ‚úÖ Testing & Validation
 
1.  **Test-Driven Development (TDD):**
    *   **New Features:** Outline tests, write failing tests, implement code, refactor.
    *   **Bug Fixes:** Write a test reproducing the bug *before* fixing it.
2.  **Comprehensive Tests:** Write thorough unit, integration, and/or end-to-end tests covering critical paths, edge cases, and major functionality.
3.  **Tests Must Pass:** All tests **must** pass before committing or considering a task complete. Notify the human developer immediately if tests fail and cannot be easily fixed.
4.  **No Mock Data/Code (Except Tests):** Use mock data *only* within established test environments and frameworks. Do not create new 'dummy' or 'mock' code implementations in the main codebase for testing purposes; rely on real/realistic data sources or approved test mocks.
5.  **Manual Verification:** Supplement automated tests with manual checks where appropriate, especially for UI changes.

## üêõ Debugging & Troubleshooting
 
1.  **Fix the Root Cause:** Prioritize fixing the underlying issue causing an error, rather than just masking or handling it, unless a temporary workaround is explicitly agreed upon.
2.  **Console/Log Analysis:** Always check browser and server console output for errors, warnings, or relevant logs after making changes or when debugging. Report findings.
3.  **Targeted Logging:** For persistent or complex issues, add specific `console.log` statements (or use a project logger) to trace execution and variable states. *Remember to check the output.*
4.  **Check the `fixes/` Directory:** Before deep-diving into a complex or recurring bug, check `fixes/` for documented solutions to similar past issues.
5.  **Document Complex Fixes:** If a bug requires significant effort (multiple iterations, complex logic) to fix, create a concise `.md` file in the `fixes/` directory detailing the problem, investigation steps, and the solution. Name it descriptively (e.g., `fixes/resolve-race-condition-in-user-update.md`).
6.  **Systematic Approach (Complex Issues):** For complex bugs, develop a systematic troubleshooting plan. Outline steps, isolate variables, and test potential solutions methodically before applying a fix.
7.  **Research:** Use available tools (Firecrawl, documentation search, etc.) to research solutions or best practices when stuck or unsure.

## üîí Security
 
1.  **Server-Side Authority:** Keep sensitive logic, validation, and data manipulation strictly on the server-side. Use secure API endpoints.
2.  **Input Sanitization/Validation:** Always sanitize and validate user input on the server-side.
3.  **Dependency Awareness:** Be mindful of the security implications of adding or updating dependencies.
4.  **Credentials & Secrets:** **Never** hardcode secrets or credentials in the codebase. **Always** use Google Secret Manager for storing and accessing secrets. Do not use `.env` files for sensitive information; they are only for non-sensitive, environment-specific configuration. Use `.env.example` for templates.
 
## üå≥ Version Control & Environment
 
1.  **Git Hygiene:**
    *   Commit frequently with clear, atomic messages.
    *   Keep the working directory clean; ensure no unrelated or temporary files are staged or committed.
    *   Use `.gitignore` effectively.
2.  **Branching Strategy:** Follow the project's established branching strategy. Do not create new branches unless requested or necessary for the workflow (e.g., feature branches).
3.  **.env Files:** **Never** commit `.env` files containing secrets. Use `.env.example` for templates. Local `.env` files should only contain non-sensitive configuration. Do not overwrite local `.env` files without confirmation.
4.  **Environment Awareness:** Code should function correctly across different environments (dev, test, prod). Use environment variables for configuration, sourcing secrets securely (e.g., via Secret Manager).
5.  **Environment Parity:** Strive to keep the development environment setup (dependencies, configurations, data sources where feasible) as close to production as possible to ensure smooth transitions and reliable testing.
6.  **Server Management:** Kill related running servers before starting new ones. Restart servers after relevant configuration or backend changes.

## üìÑ Documentation Maintenance
 
1.  **Update Docs:** If code changes impact architecture, technical decisions, established patterns, or task status, update the relevant documentation (`README.md`, `docs/architecture.md`, `docs/technical.md`, `tasks/tasks.md`, `docs/status.md`).
2.  **Keep Rules Updated:** This `.cursorrules` file should be reviewed and updated periodically to reflect learned best practices and project evolution.
 
## ‚≠ê Primary Directive Check
 
1.  **Prioritize Core Philosophy #1:** Always prioritize and verify adherence to Core Philosophy rule #1 (Direct Action & Careful Execution) before applying other rules.